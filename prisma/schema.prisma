// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials provider
  subscription  Subscription @default(HOBBY)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  apiConnections ApiConnection[]
  alerts Alert[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ApiConnection {
  id          String   @id @default(cuid())
  name        String
  provider    String   // e.g., "stripe", "twilio", "custom"
  baseUrl     String
  apiKey      String   @db.Text // encrypted
  secretKey   String?  @db.Text // encrypted (for providers that need it)
  isActive    Boolean  @default(true)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  healthChecks HealthCheck[]
  costMetrics CostMetric[]
  rateLimitMetrics RateLimitMetric[]
  alerts Alert[]

  @@unique([userId, name])
}

model HealthCheck {
  id              String   @id @default(cuid())
  apiConnectionId String
  endpoint        String
  method          String   @default("GET")
  expectedStatus  Int      @default(200)
  timeout         Int      @default(5000) // milliseconds
  interval        Int      @default(300) // seconds
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  apiConnection ApiConnection @relation(fields: [apiConnectionId], references: [id], onDelete: Cascade)
  checkResults CheckResult[]

  @@unique([apiConnectionId, endpoint, method])
}

model CheckResult {
  id            String      @id @default(cuid())
  healthCheckId String
  status        CheckStatus
  responseTime  Int         // milliseconds
  statusCode    Int?
  errorMessage  String?
  timestamp     DateTime    @default(now())
  metadata      Json?       // additional response data

  healthCheck HealthCheck @relation(fields: [healthCheckId], references: [id], onDelete: Cascade)

  @@index([healthCheckId, timestamp])
}

model CostMetric {
  id              String   @id @default(cuid())
  apiConnectionId String
  amount          Decimal  @db.Decimal(10, 4)
  currency        String   @default("USD")
  period          String   // e.g., "2024-01", "daily", "monthly"
  timestamp       DateTime @default(now())
  metadata        Json?    // provider-specific cost breakdown

  apiConnection ApiConnection @relation(fields: [apiConnectionId], references: [id], onDelete: Cascade)

  @@index([apiConnectionId, timestamp])
}

model RateLimitMetric {
  id              String   @id @default(cuid())
  apiConnectionId String
  endpoint        String
  limit           Int
  remaining       Int
  resetTime       DateTime
  timestamp       DateTime @default(now())

  apiConnection ApiConnection @relation(fields: [apiConnectionId], references: [id], onDelete: Cascade)

  @@index([apiConnectionId, timestamp])
}

model Alert {
  id              String      @id @default(cuid())
  userId          String
  apiConnectionId String?
  type            AlertType
  condition       String      // e.g., "error_rate > 5%", "cost > $100"
  threshold       Decimal     @db.Decimal(10, 4)
  isActive        Boolean     @default(true)
  channels        String[]    // ["email", "slack", "webhook"]
  webhookUrl      String?
  slackChannel    String?
  lastTriggered   DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  apiConnection ApiConnection? @relation(fields: [apiConnectionId], references: [id], onDelete: Cascade)
  alertHistory AlertHistory[]

  @@index([userId, isActive])
}

model AlertHistory {
  id        String   @id @default(cuid())
  alertId   String
  message   String
  severity  AlertSeverity
  timestamp DateTime @default(now())
  resolved  Boolean  @default(false)
  resolvedAt DateTime?

  alert Alert @relation(fields: [alertId], references: [id], onDelete: Cascade)

  @@index([alertId, timestamp])
}

enum Subscription {
  HOBBY
  STARTUP
  BUSINESS
}

enum CheckStatus {
  SUCCESS
  FAILURE
  TIMEOUT
  ERROR
}

enum AlertType {
  ERROR_RATE
  RESPONSE_TIME
  COST_THRESHOLD
  RATE_LIMIT
  UPTIME
  CUSTOM
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
